<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.

const int N = 6;
typedef int [0, N-1] id_t;

int [0,4] count;
chan barber_free[N];
chan haircut_done[N];
broadcast chan barber_wakeup;
urgent chan exiting;
id_t customers[4];

void enqueue(id_t element){
    customers[count++] = element;
}

void dequeue(){
    int i = 0;
    count -= 1;
    while(i &lt; count){
        customers[i] = customers[i+1];
        i++;
    }
    customers[i] = 0;
}

id_t front(){
return customers[0];
}
id_t second(){
return customers[1];
}
id_t last(){
    return customers[count-1];
}</declaration>
	<template>
		<name>Barber</name>
		<declaration>clock time;</declaration>
		<location id="id0" x="-119" y="-17">
			<committed/>
		</location>
		<location id="id1" x="51" y="-8">
			<urgent/>
		</location>
		<location id="id2" x="-119" y="93">
			<name x="-187" y="102">HC_Done</name>
		</location>
		<location id="id3" x="51" y="93">
			<name x="59" y="101">cutting_hair</name>
			<label kind="invariant" x="58" y="118">time &lt;=1</label>
		</location>
		<location id="id4" x="-8" y="-102">
			<name x="-18" y="-136">sleeping</name>
		</location>
		<init ref="id4"/>
		<transition>
			<source ref="id0"/>
			<target ref="id4"/>
			<label kind="guard" x="-119" y="-85">count == 0</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id3"/>
			<label kind="guard" x="-85" y="-24">count &gt; 0</label>
			<label kind="synchronisation" x="-85" y="-8">barber_free[front()]!</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-170" y="17">exiting?</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="select" x="68" y="9">e : id_t</label>
			<label kind="synchronisation" x="59" y="26">barber_free[front()]!</label>
			<label kind="assignment" x="68" y="43">time = 0</label>
			<nail x="51" y="34"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-68" y="76">time &gt;=1</label>
			<label kind="synchronisation" x="-93" y="93">haircut_done[front()]!</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="25" y="-85">barber_wakeup?</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Customer</name>
		<parameter>const id_t id</parameter>
		<declaration>// Place local declarations here.
clock time;
</declaration>
		<location id="id5" x="501" y="212">
			<committed/>
		</location>
		<location id="id6" x="204" y="204">
			<name x="144" y="187">leaving</name>
			<urgent/>
		</location>
		<location id="id7" x="620" y="280">
			<name x="603" y="246">haircut</name>
		</location>
		<location id="id8" x="195" y="280">
			<name x="93" y="263">waiting_room</name>
		</location>
		<location id="id9" x="374" y="204">
			<name x="391" y="187">enter</name>
			<urgent/>
		</location>
		<location id="id10" x="374" y="136">
			<name x="364" y="102">at_home</name>
			<label kind="invariant" x="391" y="119">time&lt;=5</label>
		</location>
		<init ref="id10"/>
		<transition>
			<source ref="id5"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="434" y="144">exiting!</label>
			<label kind="assignment" x="450" y="161">dequeue(), time = 0</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="544" y="212">haircut_done[id]?</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id10"/>
			<label kind="assignment" x="297" y="127">time = 0</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id6"/>
			<label kind="guard" x="272" y="187">count &gt;= 4</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="382" y="289">barber_free[id]?</label>
			<nail x="399" y="281"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id8"/>
			<label kind="guard" x="314" y="238">count &lt; 4</label>
			<label kind="synchronisation" x="315" y="221">barber_wakeup!</label>
			<label kind="assignment" x="306" y="255">enqueue(id)</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id9"/>
			<label kind="guard" x="314" y="161">time &gt;= 2</label>
		</transition>
	</template>
	<system>// List one or more processes to be composed into a system.
system Barber, Customer;
    </system>
	<queries>
		<query>
			<formula>Customer(3).waiting_room--&gt;Customer(3).haircut</formula>
			<comment>Checks if the 4th customer will get a hair cut if he starts waiting in the waiting_room</comment>
		</query>
		<query>
			<formula>Customer(2).waiting_room--&gt;Customer(2).haircut</formula>
			<comment>Checks if the 3rd customer will get a hair cut if he starts waiting in the waiting_room</comment>
		</query>
		<query>
			<formula>Customer(1).waiting_room--&gt;Customer(1).haircut</formula>
			<comment>Checks if the 1sh customer will get a hair cut if he starts waiting in the waiting_room</comment>
		</query>
		<query>
			<formula>Customer(0).waiting_room--&gt;Customer(0).haircut</formula>
			<comment>Customer 0 always gets a hair cut eventually when he/she is in the waiting room</comment>
		</query>
		<query>
			<formula>A[]!(Barber.sleeping and forall(i:id_t)Customer(i).waiting_room)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[]!deadlock</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
